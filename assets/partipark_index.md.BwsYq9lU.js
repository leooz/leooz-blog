import{_ as e}from"./chunks/bon.CVLeRXkn.js";import{_ as a,c as n,a0 as i,j as t,o as l}from"./chunks/framework.XulkbXWZ.js";const E=JSON.parse('{"title":"Diacter","description":"Description complète du projet","frontmatter":{"title":"Diacter","description":"Description complète du projet"},"headers":[],"relativePath":"partipark/index.md","filePath":"partipark/index.md"}'),p={name:"partipark/index.md"};function r(o,s,h,d,c,k){return l(),n("div",null,s[0]||(s[0]=[i('<h1 id="diacter" tabindex="-1">Diacter <a class="header-anchor" href="#diacter" aria-label="Permalink to &quot;Diacter&quot;">​</a></h1><p>Bienvenue dans la documentation complète du projet <strong>Nom du Projet</strong>.</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Ce projet vise à [insérer objectif principal]. Développé en utilisant des technologies modernes comme <strong>[technologies utilisées]</strong>, il présente diverses fonctionnalités uniques.</p><h2 id="image" tabindex="-1">Image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;Image&quot;">​</a></h2><p>Voici une capture d&#39;écran de l&#39;application :</p><p><img src="'+e+'" alt="Capture d&#39;écran du projet"></p><h2 id="video" tabindex="-1">Vidéo <a class="header-anchor" href="#video" aria-label="Permalink to &quot;Vidéo&quot;">​</a></h2><p>Tu peux également intégrer des vidéos pour illustrer le fonctionnement :</p>',9),t("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/dQw4w9WgXcQ",frameborder:"0",allowfullscreen:""},null,-1),i(`<h2 id="citation" tabindex="-1">Citation <a class="header-anchor" href="#citation" aria-label="Permalink to &quot;Citation&quot;">​</a></h2><p>Intègre des citations ou des remarques importantes :</p><blockquote><p>&quot;Ce projet est un excellent exemple de la façon dont les technologies modernes peuvent être utilisées pour résoudre des problèmes complexes.&quot; – <strong>Léonard Corre</strong></p></blockquote><h2 id="exemple-de-code" tabindex="-1">Exemple de Code <a class="header-anchor" href="#exemple-de-code" aria-label="Permalink to &quot;Exemple de Code&quot;">​</a></h2><p>Tu peux afficher des blocs de code comme suit :</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Exemple de code en JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Serveur démarré sur le port 3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="integration-typescript" tabindex="-1">Intégration TypeScript <a class="header-anchor" href="#integration-typescript" aria-label="Permalink to &quot;Intégration TypeScript&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Exemple de code TypeScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Project</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myProject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Project</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nom du Projet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ceci est un projet d&#39;exemple en TypeScript&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myProject);</span></span></code></pre></div><h2 id="tableaux" tabindex="-1">Tableaux <a class="header-anchor" href="#tableaux" aria-label="Permalink to &quot;Tableaux&quot;">​</a></h2><p>Les tableaux peuvent être utilisés pour structurer des données :</p><table tabindex="0"><thead><tr><th>Fonctionnalité</th><th>Description</th><th>Statut</th></tr></thead><tbody><tr><td>Authentification</td><td>Implémentation d&#39;une auth sécurisée</td><td>En cours</td></tr><tr><td>API REST</td><td>Développement de l&#39;API en Node.js</td><td>Complété</td></tr><tr><td>Interface</td><td>UI en React et Next.js</td><td>Complété</td></tr></tbody></table><h2 id="alertes" tabindex="-1">Alertes <a class="header-anchor" href="#alertes" aria-label="Permalink to &quot;Alertes&quot;">​</a></h2><p>Tu peux ajouter des alertes pour attirer l&#39;attention :</p><div class="warning custom-block"><p class="custom-block-title">Attention</p><p>Ce projet est encore en cours de développement. Certaines fonctionnalités peuvent être instables.</p></div><div class="tip custom-block"><p class="custom-block-title">Conseil</p><p>Utilise Docker pour une meilleure gestion des environnements.</p></div><h2 id="liens-externes" tabindex="-1">Liens Externes <a class="header-anchor" href="#liens-externes" aria-label="Permalink to &quot;Liens Externes&quot;">​</a></h2><p>Ajoute des liens vers d&#39;autres ressources ou documentation :</p><p><a href="https://vitepress.dev/" target="_blank" rel="noreferrer">Consultez la documentation officielle de VitePress</a></p><h2 id="liste-a-puces" tabindex="-1">Liste à Puces <a class="header-anchor" href="#liste-a-puces" aria-label="Permalink to &quot;Liste à Puces&quot;">​</a></h2><ul><li><strong>Backend</strong> : NestJS, Express</li><li><strong>Frontend</strong> : React, Next.js</li><li><strong>DevOps</strong> : Docker, Kubernetes, GitlabCI</li><li><strong>Cloud</strong> : AWS, S3</li></ul><h2 id="liste-numerotee" tabindex="-1">Liste Numérotée <a class="header-anchor" href="#liste-numerotee" aria-label="Permalink to &quot;Liste Numérotée&quot;">​</a></h2><ol><li>Analyse du problème</li><li>Conception de l&#39;architecture</li><li>Développement et tests</li><li>Mise en production</li></ol><h2 id="graphique-ou-diagramme" tabindex="-1">Graphique ou Diagramme <a class="header-anchor" href="#graphique-ou-diagramme" aria-label="Permalink to &quot;Graphique ou Diagramme&quot;">​</a></h2><p>Tu peux aussi intégrer des diagrammes (via Mermaid, par exemple) :</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A[Start] --&gt; B[Do something];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  B --&gt; C{Is it done?};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  C --&gt;|Yes| D[Finish];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  C --&gt;|No| B;</span></span></code></pre></div><h2 id="fonctionnalites" tabindex="-1">Fonctionnalités <a class="header-anchor" href="#fonctionnalites" aria-label="Permalink to &quot;Fonctionnalités&quot;">​</a></h2><p>Voici une liste des principales fonctionnalités développées dans ce projet :</p><ul><li><strong>Fonctionnalité 1</strong> : Développement de l&#39;API REST pour la gestion des utilisateurs.</li><li><strong>Fonctionnalité 2</strong> : Interface utilisateur développée avec React.</li><li><strong>Fonctionnalité 3</strong> : Intégration de l&#39;authentification OAuth2 pour les utilisateurs.</li><li><strong>Fonctionnalité 4</strong> : CI/CD avec GitLabCI et déploiement sur AWS.</li></ul><h2 id="technologies-utilisees" tabindex="-1">Technologies Utilisées <a class="header-anchor" href="#technologies-utilisees" aria-label="Permalink to &quot;Technologies Utilisées&quot;">​</a></h2><p>Ce projet utilise les technologies suivantes :</p><ul><li><strong>Node.js</strong> pour le backend.</li><li><strong>React</strong> pour le frontend.</li><li><strong>AWS</strong> pour le déploiement.</li><li><strong>Docker</strong> pour la conteneurisation des services.</li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Ce projet est un excellent exemple de l&#39;intégration de multiples technologies pour répondre à des besoins spécifiques. Pour plus d&#39;informations, consulte le <a href="https://github.com/ton-projet" target="_blank" rel="noreferrer">repository GitHub du projet</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>### Explication des sections :</span></span>
<span class="line"><span>1. **Introduction** : Résume le projet, ses objectifs, et les technologies utilisées.</span></span>
<span class="line"><span>2. **Image** : Intégration d’images avec une description claire.</span></span>
<span class="line"><span>3. **Vidéo** : Ajout de vidéos via un lien \`iframe\`.</span></span>
<span class="line"><span>4. **Citation** : Exemples de citations pour des remarques ou réflexions importantes.</span></span>
<span class="line"><span>5. **Exemple de Code** : Affiche du code dans différents langages avec mise en forme.</span></span>
<span class="line"><span>6. **Tableaux** : Utilisation de tableaux pour structurer des données ou des fonctionnalités.</span></span>
<span class="line"><span>7. **Alertes** : Utilisation de blocs d’alerte pour souligner des points importants.</span></span>
<span class="line"><span>8. **Listes** : Exemples de listes à puces et numérotées.</span></span>
<span class="line"><span>9. **Graphiques/Diagrammes** : Utilisation de Mermaid pour intégrer des diagrammes.</span></span>
<span class="line"><span>10. **Fonctionnalités** : Liste des fonctionnalités clés du projet.</span></span>
<span class="line"><span>11. **Technologies Utilisées** : Détail des technologies employées.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Utilisation :</span></span>
<span class="line"><span>Ce template peut être réutilisé pour chaque projet dans ton blog, en modifiant simplement les sections spécifiques à chaque projet. Cela te permettra de garder une documentation complète et bien organisée pour chaque projet.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Est-ce que ce modèle correspond à tes attentes ?</span></span></code></pre></div>`,34)]))}const m=a(p,[["render",r]]);export{E as __pageData,m as default};
